import os
from datetime import datetime
import requests
import telebot
from bs4 import BeautifulSoup
from geopy.geocoders import Nominatim

# tg bot
bot = telebot.TeleBot("7927124560:AAEH8Np2jp5e3cvL_VNE_Zk-H6Y1DQtDImA")
# yandex api
access_key = "4f377d0d-fd02-4681-9b1f-5a51ac58217a"
# user city
user_coordinates = {}
# city finder
geolocator = Nominatim(user_agent="weather_bot")


# log
def log_message(user_id, message, is_bot=False):
    log_file = f"{user_id}.log"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sender = "Bot" if is_bot else f"User {user_id}"

    with open(log_file, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {sender}: {message}\n")


# get cords
def get_user_coordinates(message):
    user_id = message.from_user.id
    if user_coordinates:
        return user_coordinates[user_id]
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ö–µ–º–µ—Ä–æ–≤–æ.", )
        return '55.3333', '86.0833', '–ö–µ–º–µ—Ä–æ–≤–æ'


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ API
def translate_condition(condition):
    conditions = {
        'NO_TYPE': '–Ω–µ—Ç –æ—Å–∞–¥–∫–æ–≤',
        'RAIN': '–¥–æ–∂–¥—å',
        'SLEET': '—Å–ª—è–∫–æ—Ç—å',
        'SNOW': '—Å–Ω–µ–≥',
        'HAIL': '–≥—Ä–∞–¥'
    }
    return conditions.get(condition, condition)


def translate_windir(wind_dir):
    directions = {
        'NORTH_WEST': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
        'NORTH': '—Å–µ–≤–µ—Ä–Ω—ã–π',
        'NORTH_EAST': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π',
        'EAST': '–≤–æ—Å—Ç–æ—á–Ω—ã–π',
        'SOUTH_EAST': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π',
        'SOUTH': '—é–∂–Ω—ã–π',
        'SOUTH_WEST': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
        'WEST': '–∑–∞–ø–∞–¥–Ω—ã–π',
        'CALM': '—à—Ç–∏–ª—å'
    }
    return directions.get(wind_dir, wind_dir)


def translate_prec(prec_strength):
    prec = {
        'ZERO': '–±–µ–∑ –æ—Å–∞–¥–∫–æ–≤',
        'WEAK': '—Å–ª–∞–±—ã–µ –æ—Å–∞–¥–∫–∏',
        'AVERAGE': '—É–º–µ—Ä–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏',
        'STRONG': '—Å–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏',
        'VERY_STRONG': '–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏'
    }
    return prec.get(prec_strength, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å')


def transliterate(text):
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e',
        '—ë': 'yo', '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k',
        '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r',
        '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts',
        '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '', '—ã': 'y', '—å': '',
        '—ç': 'e', '—é': 'yu', '—è': 'ya', '-': '-', ' ': '-'
    }

    result = []
    for char in text.lower():
        if char in translit_map:
            result.append(translit_map[char])
        else:
            result.append(char)

    return ''.join(result).replace('--', '-').strip('-')


# /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∫–µ–º–µ—Ä–æ–≤–æ.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/current - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
        "/forecast - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
        "/scrape - —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø–æ–≥–æ–¥—ã\n"
        "/position - —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    bot.reply_to(message, welcome_text)
    log_message(user_id, "/start")
    log_message(user_id, welcome_text, is_bot=True)


# weather now
@bot.message_handler(commands=['current'])
def get_current_weather(message):
    user_id = message.from_user.id
    log_message(user_id, "/current")

    try:
        lat, lon, city = get_user_coordinates(message)

        headers = {
            "X-Yandex-Weather-Key": access_key
        }

        query = '''{
            weatherByPoint(request: { lat: ''' + str(lat) + ''', lon: ''' + str(lon) + ''' }) {
                now {
                    temperature
                    humidity
                    pressure
                    windSpeed
                    windDirection          
                    cloudiness
                    precType
                    precStrength
                }
            }
        }'''

        response = requests.post('https://api.weather.yandex.ru/graphql/query', headers=headers, json={'query': query})
        data = response.json()
        now = data['data']['weatherByPoint']['now']

        weather_info = (
            f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {now['temperature']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {now['humidity']}%\n"
            f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {now['pressure']} –º–º —Ä—Ç.—Å—Ç.\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {now['windSpeed']} –º/—Å, {translate_windir(now['windDirection'])}\n"
            f"‚òÅÔ∏è –û—Å–∞–¥–∫–∏: {translate_condition(now['precType'])}, —Å–∏–ª–∞: {translate_prec(now['precStrength'])}\n"
        )

        bot.reply_to(message, weather_info)
        log_message(user_id, weather_info, is_bot=True)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {str(e)}"
        bot.reply_to(message, error_msg)
        log_message(user_id, error_msg, is_bot=True)


# on week
@bot.message_handler(commands=['forecast'])
def get_weather_forecast(message):
    user_id = message.from_user.id
    log_message(user_id, "/forecast")

    try:
        lat, lon, city = get_user_coordinates(message)

        headers = {
            "X-Yandex-Weather-Key": access_key
        }

        query = '''{                    
                    weatherByPoint(request: { lat: ''' + str(lat) + ''', lon: ''' + str(lon) + ''' }) {
                        forecast {
                          days(limit: 7) {
                             time
                             parts {
                                morning {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                day {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                evening {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                night {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                }
                            }
                        }
                    }
                }'''

        response = requests.post('https://api.weather.yandex.ru/graphql/query', headers=headers, json={'query': query})
        data = response.json()
        days = data['data']['weatherByPoint']['forecast']['days']

        forecast_info = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é  –≤ {city}:\n"

        for day in days:
            forecast_info += "-------------------------------------\n"

            date = day['time'][0:10]

            times = [
                day['parts']['morning'],
                day['parts']['day'],
                day['parts']['evening'],
                day['parts']['night']
            ]

            times_ru = ['—É—Ç—Ä–æ', '–¥–µ–Ω—å', '–≤–µ—á–µ—Ä', '–Ω–æ—á—å']

            for time, time_ru in zip(times, times_ru):
                forecast_info += (
                    f"\nüìÖ {date} {time_ru}:\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {time['temperature']}¬∞C\n"
                    f"üå¨ –í–µ—Ç–µ—Ä: {time['windSpeed']} –º/—Å, {translate_windir(time['windDirection'])}\n"
                    f"‚òÅÔ∏è –û—Å–∞–¥–∫–∏: {translate_condition(time['precType'])}, —Å–∏–ª–∞: {translate_prec(time['precStrength'])}\n\n"
                )

        bot.reply_to(message, forecast_info)
        log_message(user_id, forecast_info, is_bot=True)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
        bot.reply_to(message, error_msg)
        log_message(user_id, error_msg, is_bot=True)


@bot.message_handler(commands=['scrape'])
def parse_weather(message):
    try:
        scraped_info = parse_meteoservice_weather(message)
        bot.reply_to(message, scraped_info)
        log_message(message.from_user.id, scraped_info, is_bot=True)
    except Exception as e:
        print(e)


def parse_meteoservice_weather(message):
    user_id = message.from_user.id
    log_message(user_id, "/scrape")

    *_, city = get_user_coordinates(message)

    # –∑–∞–ø—Ä–æ—Å
    url = f"https://www.meteoservice.ru/weather/now/{transliterate(city.lower())}"
    response = requests.get(url, headers={
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept-Language': 'ru-RU,ru;q=0.9'
    })

    soup = BeautifulSoup(response.text, 'html.parser')

    # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    temp_section = soup.find('div', class_='temperature')
    temp = temp_section.get_text(strip=True)

    # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
    feels_like_temp_section = soup.find('div', class_='h5 feeled-temperature')
    feels_like_temp = feels_like_temp_section.find_next('span', class_='value colorize-server-side').get_text(
        strip=True)

    # –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
    condition_row = soup.find('div', class_='small-12 columns text-center padding-top-2')
    condition = condition_row.find_next('p', class_='margin-bottom-0').get_text(strip=True)

    return (f"üå§ –í {city} —Å–µ–π—á–∞—Å {temp}C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like_temp}C\n"
            f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {condition}\n")


# /position
@bot.message_handler(commands=['position'])
def handle_position(message):
    user_id = message.from_user.id
    log_message(user_id, "/position")

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True))

    bot.send_message(
        message.chat.id,
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=markup
    )

    bot.register_next_step_handler(message, process_position_input)


def process_position_input(message):
    user_id = message.from_user.id

    try:
        if message.location:
            lat = message.location.latitude
            lon = message.location.longitude
            location = geolocator.reverse(f"{lat}, {lon}")
            city = location.raw.get('address', {}).get('city', '–≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏')

            response = (
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:\n"
                f"–®–∏—Ä–æ—Ç–∞: {lat}\n"
                f"–î–æ–ª–≥–æ—Ç–∞: {lon}\n"
                f"–ì–æ—Ä–æ–¥: {city}"
            )

            user_coordinates[user_id] = (lat, lon, city)

        elif message.text:
            city = message.text
            location = geolocator.geocode(city)

            if location:
                lat = location.latitude
                lon = location.longitude

                response = (
                    f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}:\n"
                    f"–®–∏—Ä–æ—Ç–∞: {lat}\n"
                    f"–î–æ–ª–≥–æ—Ç–∞: {lon}\n"
                    f"–ê–¥—Ä–µ—Å: {location.address}"
                )

                user_coordinates[user_id] = (lat, lon, city)
            else:
                response = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                bot.register_next_step_handler(message, process_position_input)
                return
        else:
            response = "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
            bot.register_next_step_handler(message, process_position_input)
            return

        bot.send_message(message.chat.id, response, reply_markup=telebot.types.ReplyKeyboardRemove())
        log_message(user_id, response, is_bot=True)

    except Exception as e:
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        bot.send_message(message.chat.id, error_msg)
        log_message(user_id, error_msg, is_bot=True)


# /history
@bot.message_handler(commands=['history'])
def show_history(message):
    user_id = message.from_user.id
    log_message(user_id, "/history")

    log_file = f"{user_id}.log"

    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                history = f.read()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
            last_lines = "\n".join(history.split("\n")[-10:])
            bot.reply_to(message, f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏:\n{last_lines}")
            log_message(user_id, "–ü–æ–∫–∞–∑–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", is_bot=True)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
            bot.reply_to(message, error_msg)
            log_message(user_id, error_msg, is_bot=True)
    else:
        no_history_msg = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        bot.reply_to(message, no_history_msg)
        log_message(user_id, no_history_msg, is_bot=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    user_id = message.from_user.id
    log_message(user_id, message.text)

    reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: /start, /current, /forecast, /scrape, /position, /history"
    bot.reply_to(message, reply_text)
    log_message(user_id, reply_text, is_bot=True)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("started")
bot.infinity_polling()
