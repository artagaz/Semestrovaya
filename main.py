import os
import requests
from bs4 import BeautifulSoup
import telebot
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7927124560:AAEH8Np2jp5e3cvL_VNE_Zk-H6Y1DQtDImA")

# API –∫–ª—é—á –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã v3
YANDEX_WEATHER_API_KEY = "4f377d0d-fd02-4681-9b1f-5a51ac58217a"

access_key = "4f377d0d-fd02-4681-9b1f-5a51ac58217a"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
def log_message(user_id, message, is_bot=False):
    log_file = f"{user_id}.log"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sender = "Bot" if is_bot else f"User {user_id}"

    with open(log_file, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {sender}: {message}\n")


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/current - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
        "/forecast - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
        "/scrape - —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø–æ–≥–æ–¥—ã\n"
        "/hourly - –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    bot.reply_to(message, welcome_text)
    log_message(user_id, "/start")
    log_message(user_id, welcome_text, is_bot=True)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç !!!!
def get_moscow_coordinates():
    return "55.7558", "37.6173"


# —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
@bot.message_handler(commands=['current'])
def get_current_weather(message):
    user_id = message.from_user.id
    log_message(user_id, "/current")

    try:
        headers = {
            "X-Yandex-Weather-Key": access_key
        }

        query = """{
            weatherByPoint(request: { lat: 52.37125, lon: 4.89388 }) {
                now {
                    temperature
                    humidity
                    pressure
                    windSpeed
                    windDirection          
                    cloudiness
                    precType
                    precStrength
                }
            }
        }"""

        response = requests.post('https://api.weather.yandex.ru/graphql/query', headers=headers, json={'query': query})
        data = response.json()
        now = data['data']['weatherByPoint']['now']

        weather_info = (
            f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {now['temperature']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {now['humidity']}%\n"
            f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {now['pressure']} –º–º —Ä—Ç.—Å—Ç.\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {now['windSpeed']} –º/—Å, {translate_windir(now['windDirection'])}\n"
            f"‚òÅÔ∏è –û—Å–∞–¥–∫–∏: {translate_condition(now['precType'])}, —Å–∏–ª–∞: {translate_prec(now['precStrength'])}\n"
        )

        bot.reply_to(message, weather_info)
        log_message(user_id, weather_info, is_bot=True)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {str(e)}"
        bot.reply_to(message, error_msg)
        log_message(user_id, error_msg, is_bot=True)


# –ö–æ–º–∞–Ω–¥–∞ /forecast - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã API v3
@bot.message_handler(commands=['forecast'])
def get_weather_forecast(message):
    user_id = message.from_user.id
    log_message(user_id, "/forecast")

    try:
        headers = {
            "X-Yandex-Weather-Key": access_key
        }

        query = """{                    
                    weatherByPoint(request: { lat: 52.37125, lon: 4.89388 }) {
                        forecast {
                          days(limit: 7) {
                             time
                             parts {
                                morning {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                day {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                evening {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                night {
                                    temperature
                                    humidity
                                    pressure
                                    windSpeed
                                    windDirection          
                                    cloudiness
                                    precType
                                    precStrength
                                }
                                }
                            }
                        }
                    }
                }"""

        response = requests.post('https://api.weather.yandex.ru/graphql/query', headers=headers, json={'query': query})
        data = response.json()

        days = data['data']['weatherByPoint']['forecast']['days']

        forecast_info = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"

        for day in days:
            date = day['time'][0:10]
            morning = day['parts']['morning']
            day_time = day['parts']['day']
            evening = day['parts']['evening']
            night = day['parts']['night']

            forecast_info += (
                "------------------------------------------------------"
                f"\nüìÖ {date} —É—Ç—Ä–æ:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {morning['temperature']}¬∞C\n"
                f"üå¨ –í–µ—Ç–µ—Ä: {morning['windSpeed']} –º/—Å, {translate_windir(morning['windDirection'])}\n"
                f"‚òÅÔ∏è –û—Å–∞–¥–∫–∏: {translate_condition(morning['precType'])}, —Å–∏–ª–∞: {translate_prec(morning['precStrength'])}\n\n"

                f"\nüìÖ {date} –¥–µ–Ω—å:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day_time['temperature']}¬∞C\n"
                f"üå¨ –í–µ—Ç–µ—Ä: {day_time['windSpeed']} –º/—Å, {translate_windir(day_time['windDirection'])}\n"
                f"‚òÅÔ∏è –û—Å–∞–¥–∫–∏: {translate_condition(day_time['precType'])}, —Å–∏–ª–∞: {translate_prec(day_time['precStrength'])}\n\n"

                f"\nüìÖ {date} –≤–µ—á–µ—Ä:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {evening['temperature']}¬∞C\n"
                f"üå¨ –í–µ—Ç–µ—Ä: {evening['windSpeed']} –º/—Å, {translate_windir(evening['windDirection'])}\n"
                f"‚òÅÔ∏è –û—Å–∞–¥–∫–∏: {translate_condition(evening['precType'])}, —Å–∏–ª–∞: {translate_prec(evening['precStrength'])}\n\n"

                f"\nüìÖ {date} –Ω–æ—á—å:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {night['temperature']}¬∞C\n"
                f"üå¨ –í–µ—Ç–µ—Ä: {night['windSpeed']} –º/—Å, {translate_windir(night['windDirection'])}\n"
                f"‚òÅÔ∏è –û—Å–∞–¥–∫–∏: {translate_condition(night['precType'])}, —Å–∏–ª–∞: {translate_prec(night['precStrength'])}\n\n"
            )

        bot.reply_to(message, forecast_info)
        log_message(user_id, forecast_info, is_bot=True)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
        bot.reply_to(message, error_msg)
        log_message(user_id, error_msg, is_bot=True)


# –ö–æ–º–∞–Ω–¥–∞ /hourly - –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞
@bot.message_handler(commands=['hourly'])
def get_hourly_forecast(message):
    user_id = message.from_user.id
    log_message(user_id, "/hourly")

    try:
        lat, lon = get_moscow_coordinates()

        # –ó–∞–ø—Ä–æ—Å –∫ API –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã v3
        url = f"https://api.weather.yandex.ru/v3/forecast?lat={lat}&lon={lon}&limit=1&hours=true"
        headers = {"X-Yandex-API-Key": YANDEX_WEATHER_API_KEY}
        response = requests.get(url, headers=headers)
        data = response.json()

        hourly_info = "–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞ –≤ –ú–æ—Å–∫–≤–µ:\n"

        for hour in data['forecasts'][0]['hours']:
            if hour['hour'] in ['6', '12', '18', '21']:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—ã
                hourly_info += (
                    f"\n‚è∞ {hour['hour']}:00:\n"
                    f"üå° {hour['temp']}¬∞C, {translate_condition(hour['condition'])}\n"
                    f"üå¨ –í–µ—Ç–µ—Ä: {hour['wind_speed']} –º/—Å\n"
                )

        bot.reply_to(message, hourly_info)
        log_message(user_id, hourly_info, is_bot=True)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
        bot.reply_to(message, error_msg)
        log_message(user_id, error_msg, is_bot=True)


# –ö–æ–º–∞–Ω–¥–∞ /scrape - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –º–µ—Ç–æ–¥–æ–º —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
@bot.message_handler(commands=['scrape'])
def scrape_weather(message):
    user_id = message.from_user.id
    log_message(user_id, "/scrape")

    try:
        # –°–∫—Ä–∞–ø–∏–Ω–≥ —Å —Å–∞–π—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã
        url = "https://yandex.ru/pogoda/moscow/details"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        current_temp = soup.find('div', class_='temp fact__temp fact__temp_size_s').find('span',
                                                                                         class_='temp__value').text
        condition = soup.find('div', class_='link__condition day-anchor i-bem').text.strip()
        feels_like = soup.find('div', class_='term term_orient_h fact__feels-like').find('span',
                                                                                         class_='temp__value').text

        scraped_info = (
            "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–æ–¥–æ–º —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã:\n"
            f"üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temp}¬∞C\n"
            f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"‚òÅ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {condition}"
        )

        bot.reply_to(message, scraped_info)
        log_message(user_id, scraped_info, is_bot=True)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ: {str(e)}"
        bot.reply_to(message, error_msg)
        log_message(user_id, error_msg, is_bot=True)


# –ö–æ–º–∞–Ω–¥–∞ /history - –ø–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['history'])
def show_history(message):
    user_id = message.from_user.id
    log_message(user_id, "/history")

    log_file = f"{user_id}.log"

    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                history = f.read()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
            last_lines = "\n".join(history.split("\n")[-10:])
            bot.reply_to(message, f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏:\n{last_lines}")
            log_message(user_id, "–ü–æ–∫–∞–∑–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", is_bot=True)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
            bot.reply_to(message, error_msg)
            log_message(user_id, error_msg, is_bot=True)
    else:
        no_history_msg = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        bot.reply_to(message, no_history_msg)
        log_message(user_id, no_history_msg, is_bot=True)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ API
def translate_condition(condition):
    conditions = {
        'NO_TYPE': '–Ω–µ—Ç –æ—Å–∞–¥–∫–æ–≤',
        'RAIN': '–¥–æ–∂–¥—å',
        'SLEET': '—Å–ª—è–∫–æ—Ç—å',
        'SNOW': '—Å–Ω–µ–≥',
        'HAIL': '–≥—Ä–∞–¥'
    }
    return conditions.get(condition, condition)


def translate_windir(wind_dir):
    directions = {
        'NORTH_WEST': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
        'NORTH': '—Å–µ–≤–µ—Ä–Ω—ã–π',
        'NORTH_EAST': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π',
        'EAST': '–≤–æ—Å—Ç–æ—á–Ω—ã–π',
        'SOUTH_EAST': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π',
        'SOUTH': '—é–∂–Ω—ã–π',
        'SOUTH_WEST': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
        'WEST': '–∑–∞–ø–∞–¥–Ω—ã–π',
        'CALM': '—à—Ç–∏–ª—å'
    }
    return directions.get(wind_dir, wind_dir)


def translate_prec(prec_strength):
    prec = {
        'ZERO': '–±–µ–∑ –æ—Å–∞–¥–∫–æ–≤',
        'WEAK': '—Å–ª–∞–±—ã–µ –æ—Å–∞–¥–∫–∏',
        'AVERAGE': '—É–º–µ—Ä–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏',
        'STRONG': '—Å–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏',
        'VERY_STRONG': '–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏'
    }
    return prec.get(prec_strength, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    user_id = message.from_user.id
    log_message(user_id, message.text)

    reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: /start, /current, /forecast, /hourly, /scrape, /history"
    bot.reply_to(message, reply_text)
    log_message(user_id, reply_text, is_bot=True)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
